[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/unite.vim'

[[plugins]]
repo = 'Shougo/vimfiler'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'Yggdroot/indentLine'

[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
set background=dark
colorscheme hybrid
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
" status line settigns
let g:lightline = {
    \ 'colorscheme': 'wombat',
    \ 'mode_map': {'c': 'NORMAL'},
    \ 'active': {
    \   'left': [
    \       ['mode', 'paste'],
    \       ['pyenv'],
    \       ['fugitive', 'filename']
    \   ],
    \   'right': [
    \       ['syntastic', 'lineinfo'],
    \       ['percent'],
    \       ['fileformat', 'fileencoding', 'filetype']
    \   ]
    \ },
    \ 'component_expand': {
    \   'syntastic': 'SyntasticStatuslineFlag',
    \ },
    \ 'component_type': {
    \   'syntastic': 'error',
    \ },
    \ 'component_function': {
    \   'modified': 'MyModified',
    \   'readonly': 'MyReadonly',
    \   'fugitive': 'MyFugitive',
    \   'filename': 'MyFilename',
    \   'fileformat': 'MyFileformat',
    \   'filetype': 'MyFiletype',
    \   'fileencoding': 'MyFileencoding',
    \   'mode': 'MyMode',
    \   'pyenv': 'pyenv#statusline#component',
    \ },
    \ 'separator': {'left': '', 'right': ''},
    \ 'subseparator': {'left': '|', 'right': '|'}
    \ }
'''

[[plugins]]
repo = 'thinca/vim-template'

[[plugins]]
repo = 'thinca/vim-quickrun'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_add = '''
" snipets settings
imap <C-k>      <Plug>(neosnippet_expand_or_jump)
smap <C-k>      <Plug>(neosnippet_expand_or_jump)
xmap <C-k>      <Plug>(neosnippet_expand_target)
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)": pumvisible() ?
    \ "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
    \ "\<Plug>(neosnippet_expand_or_jump)": "\<TAB>"
" For snippet_complete marker.
if has("conceal")
  set conceallevel=2 concealcursor=i
  endif
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'hotchpotch/perldoc-vim'

[[plugins]]
repo = 'scrooloose/syntastic'
hook_post_source = '''
" use flake8 for python lint checker
let g:syntastic_python_checkers = ['flake8']
'''

[[plugins]]
repo = 'haya14busa/incsearch.vim'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
if dein#util#_is_windows()
    let cmd = 'tools\\update-dll-mingw'
elseif dein#util#_is_cygwin()
    let cmd = 'make -f make_cygwin.mak'
elseif executable('gmake')
    let cmd = 'gmake'
else
    let cmd = 'make'
endif
    let g:dein#plugin.build = cmd
'''

[[plugins]]
repo = 'Shougo/vimshell'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
if = 'has("nvim")'
on_i = 1

[[plugins]]
repo = 'Shougo/neocomplete.vim'
if = 'has("lua")'
on_i = 1
hook_add = '''
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default': '',
    \ 'vimshell': $HOME.'/.vimshell_hist',
    \ 'scheme': $HOME.'/.gosh_completions'}
" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'
" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()
" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
    return neocomplete#close_popup() . "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Enter>.
inoremap <expr><CR> pumvisible() ? neocomplete#close_popup() : "\<CR>"

" Enable omni completion.
autocmd vimrc FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd vimrc FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd vimrc FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd vimrc FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
    let g:neocomplete#sources#omni#input_patterns = {}
endif

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'
'''

[[plugins]]
repo = 'lambdalisue/vim-django-support'
on_ft = ['python', 'python3', 'djangohtml']
on_i = 1

[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = ['python', 'python3', 'djangohtml']
on_i = 1

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_i = 1

[[plugins]]
repo = 'kchmck/vim-coffee-script'
on_ft = 'coffee'
on_i = 1

[[plugins]]
repo = 'vim-perl/vim-perl'
on_ft = 'perl'

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'mkd']
hook_add = '''
let g:vim_markdown_folding_disabled = 1
'''

[[plugins]]
repo = 'Konfekt/FastFold'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'mattn/emmet-vim'
on_ft = ['html', 'css', 'php']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['html', 'javascript']

[[plugins]]
repo = 'othree/html5.vim'
on_ft = ['html', 'css', 'php']

[[plugins]]
repo = 'hail2u/vim-css3-syntax'
on_ft = ['html', 'css', 'php']

[[plugins]]
repo = 'JuliaLang/julia-vim'

[[plugins]]
repo = 'vim-scripts/Vim-R-plugin'
on_ft = ['R']
